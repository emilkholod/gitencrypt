#!/bin/bash

# TODO:
# - сменить ecb шифрование на cbc или другую - всё равно не удасться сжимать нормально
# - добавить отслеживание gitencrypt_password в gitencrypt_secrets
# - добавить изменения для работы с ":::" - сгенерировать пароли и соли
# - добавить перебор паролей и солей из файла для gitencrypt_secrets и .gitencrypt_password (нужно для работы с историей). Проверка правильности кодировки.

PROJECT_GITENCRYPT_PATH_TO_PASSWORD=./.gitencrypt_password
PROJECT_GITENCRYPT_PATH_TO_SECRETS=./gitencrypt_secrets

# Check env variables
if [[ ! -n "$GITENCRYPT_PASS_FIXED" ]]; then
    # Check project variables
    if [[ ! -f "$(pwd)/$PROJECT_GITENCRYPT_PATH_TO_PASSWORD" ]]; then
        >&2 echo "Please set 'GITENCRYPT_PASS_FIXED' to env varibles"
        >&2 echo "Or define them in '$PROJECT_GITENCRYPT_PATH_TO_PASSWORD' file"
        exit 1
    else
        set -o allexport && source $PROJECT_GITENCRYPT_PATH_TO_PASSWORD && set +o allexport
    fi
fi

GITENCRYPT_DEBUG=false
GITENCRYPT_SEPARATOR=":"
binary_to_hex="xxd -p -c 1000000000"
hex_to_binary="xxd -r -p"
remove_null_byte="tr -d "\r\n\0""
base64_regexp="^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
GITENCRYPT_LOG_PATH="./log.txt"

openssl_version="$(openssl version | grep -Po '(?<=OpenSSL )[^; ]+' | head -n 1)"

if [[ $openssl_version == 3.* ]]; then
    function openssl_crypt_fix(){
        # Remove salt prefix
        $binary_to_hex | sed "s/^53616c7465645f5f$1//" | $hex_to_binary
        # # Add salt prefix
        # $binary_to_hex | sed "s/^/53616c7465645f5f$1/" | $hex_to_binary
    };
    function openssl_decrypt_fix(){
        # Remove salt prefix
        $binary_to_hex | sed "s/^53616c7465645f5f$1//" | $hex_to_binary
    };
else
    function openssl_crypt_fix(){
        # Remove salt prefix
        $binary_to_hex | sed "s/^53616c7465645f5f$1//" | $hex_to_binary
        # Add salt prefix if not exist
        # $binary_to_hex | sed "/^53616c7465645f5f/! s/^/53616c7465645f5f$1&/" | $hex_to_binary
    };
    function openssl_decrypt_fix(){
        openssl_crypt_fix $1
    };
fi

function get_creds() {
    local path password salt secrets new_line
    if [[ "./$1" == $PROJECT_GITENCRYPT_PATH_TO_SECRETS ]]; then
        echo "${GITENCRYPT_PASS_FIXED}"
    else
        secrets=$(cat "$PROJECT_GITENCRYPT_PATH_TO_SECRETS" | grep "$1\\${GITENCRYPT_SEPARATOR}")
        if [ -z "$secrets" ]; then
            debug "--- Not Found secrets --- "
            password=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32)
            salt=$(tr -dc a-f0-9 </dev/urandom | head -c 16)
            new_line="$1${GITENCRYPT_SEPARATOR}${password}${GITENCRYPT_SEPARATOR}${salt}"
            debug "--- Create password ---" "$new_line"
            echo -e "$new_line" >> $PROJECT_GITENCRYPT_PATH_TO_SECRETS
        else
            debug "--- Found secrets --- " "$secrets"
            IFS=${GITENCRYPT_SEPARATOR} read path password salt <<<$(echo "$secrets")
            debug "--- Read password ---" "$path" "${password}" "${salt}"
        fi
        echo "${password} ${salt}"
    fi
}

function gitencrypt_openssl_command() {
    debug "--- OpenSSL Command ---" "$@"
    # TODO: Test this
    # if [[ ! -e "$PROJECT_GITENCRYPT_PATH_TO_SECRETS" ]]; then
    #     touch "$PROJECT_GITENCRYPT_PATH_TO_SECRETS"
    # fi
    openssl enc -aes-256-ecb -pbkdf2 -iter 600000 "$@"
}


function gitencrypt_crypt(){
    debug "--- Gitencrypt Crypt ---" "$@"
    local password salt
    read password salt <<<$(get_creds "$1")
    if [[ "./$1" == $PROJECT_GITENCRYPT_PATH_TO_SECRETS ]]; then
        gitencrypt_openssl_command -e -k ${password} | base64 -w 64
    else
        gitencrypt_openssl_command -e -k ${password} -S ${salt} | openssl_crypt_fix ${salt} | base64 -w 64
    fi
}


function gitencrypt_decrypt(){
    debug "--- Gitencrypt Decrypt ---" "$@"
    local password salt
    read password salt <<<$(get_creds "$1")
    if [[ "./$1" == $PROJECT_GITENCRYPT_PATH_TO_SECRETS ]]; then
        base64 -d | gitencrypt_openssl_command -d -k ${password}
    else
        base64 -d | openssl_decrypt_fix ${salt} | gitencrypt_openssl_command -d -k ${password} -S ${salt} || cat
    fi
}


function debug() {
    if $GITENCRYPT_DEBUG; then
        echo "" >> $GITENCRYPT_LOG_PATH
        echo "$1" >> $GITENCRYPT_LOG_PATH
        echo Second and other args: "${@:2}" >> $GITENCRYPT_LOG_PATH
        # Danger command!
        # head -1 "$2" >> $GITENCRYPT_LOG_PATH
    fi
}

function debug_tee() {
    if $GITENCRYPT_DEBUG; then
        tee -a $GITENCRYPT_LOG_PATH
    else
        cat 
    fi
}


function gitencrypt_clean() {
    debug "--- Clean ---" "$@"

    # Encoding
    gitencrypt_crypt "$1" 2>> $GITENCRYPT_LOG_PATH | debug_tee
} 


function gitencrypt_smudge() {
    debug "--- Smudge ---" "$@"

    # Decoding
    gitencrypt_decrypt "$1" 2>> $GITENCRYPT_LOG_PATH | debug_tee || cat "$1"
}


function is_text_base64() {
    if [[ $1 =~ $base64_regexp ]]; then true; else false; fi
}


function gitencrypt_textconv() {
    # Decoding
    debug "--- Textconv ---" "$@"
    local text=$(cat "$1")
    if is_text_base64 $text; then
        debug "--- Text is 'base64' ---"
        cat "$1" | gitencrypt_decrypt "$1" 2>> $GITENCRYPT_LOG_PATH || cat "$1"
    else
        debug "--- Text is not 'base64' ---" "$text"
        cat "$1"
    fi
    debug "--- Textconv Ended ---"
}
